#!/bin/bash
# Script de diagn√≥stico r√°pido para retomar sesi√≥n
# Ejecutar: chmod +x quick_diagnosis.sh && ./quick_diagnosis.sh

echo "üîç DIAGN√ìSTICO R√ÅPIDO - SouniQ Web"
echo "=================================="

# Activar entorno
cd "/Users/albertoherrastifigueroa/Library/Mobile Documents/com~apple~CloudDocs/Documents/Master/TFM/WEB2"
source .venv/bin/activate
export DJANGO_SETTINGS_MODULE=souniq_web.settings_pythonanywhere
export DEBUG=True

echo ""
echo "1Ô∏è‚É£ Verificando estado de la canci√≥n de prueba..."
python manage.py shell -c "
from music_processing.models import Song
song = Song.objects.get(id=13)
print(f'‚úÖ Canci√≥n: {song.title}')
print(f'üìä Estado: {song.status}')
print(f'üéº Stems: {song.stems.count()}')
for stem in song.stems.all()[:3]:
    print(f'   - {stem.stem_type}: {stem.file.name}')
if song.stems.count() > 3:
    print(f'   ... y {song.stems.count() - 3} m√°s')
"

echo ""
echo "2Ô∏è‚É£ Verificando APIs de Hugging Face..."
python manage.py shell -c "
from gradio_client import Client

print('üîó Verificando SouniQ/Modulo2 (MIDI)...')
try:
    client = Client('SouniQ/Modulo2')
    print('‚úÖ Conexi√≥n exitosa')
    api_info = str(client.view_api())
    if 'input_wav_path' in api_info:
        print('‚úÖ Par√°metro input_wav_path encontrado')
    elif 'input_audio' in api_info:
        print('‚ö†Ô∏è  Par√°metro input_audio encontrado (necesita correcci√≥n)')
    else:
        print('‚ùå Par√°metros no identificados')
except Exception as e:
    print(f'‚ùå Error conectando: {e}')

print('')
print('üîó Verificando Giant-Music-Transformer (Generaci√≥n)...')
try:
    client = Client('Giant-Music-Transformer')
    print('‚úÖ Conexi√≥n exitosa')
except Exception as e:
    print(f'‚ùå Error conectando: {e}')
"

echo ""
echo "3Ô∏è‚É£ Estado del servidor..."
if pgrep -f "manage.py runserver" > /dev/null; then
    echo "‚úÖ Servidor Django corriendo"
    echo "üåê URL: http://localhost:8001"
else
    echo "‚ùå Servidor Django no est√° corriendo"
    echo "‚ñ∂Ô∏è  Para iniciar: python manage.py runserver 0.0.0.0:8001"
fi

echo ""
echo "4Ô∏è‚É£ Archivos cr√≠ticos..."
if [ -f "music_processing/tasks_sync.py" ]; then
    echo "‚úÖ tasks_sync.py existe"
    line_count=$(wc -l < music_processing/tasks_sync.py)
    echo "üìÑ L√≠neas: $line_count"
else
    echo "‚ùå tasks_sync.py no encontrado"
fi

echo ""
echo "üéØ PR√ìXIMOS PASOS:"
echo "1. Corregir convert_stem_to_midi_sync() con par√°metros correctos"
echo "2. Corregir generate_new_track_sync() con par√°metros correctos"
echo "3. Probar flujo completo: Canci√≥n ‚Üí Stems ‚Üí MIDI ‚Üí Nueva canci√≥n"
echo ""
echo "üìñ Leer SESSION_STATE.md para detalles completos"
