#!/usr/bin/env python
"""
Script para probar el nuevo enfoque de reintentos en PythonAnywhere
Ejecutar en PythonAnywhere: python test_retry_approach.py
"""
import os
import sys
import json
import time

# Configurar ruta para PythonAnywhere
path = '/home/aherrasf/Souniq-web'
if path not in sys.path:
    sys.path.insert(0, path)

print("=== PRUEBA DE ENFOQUE DE REINTENTOS ===")

def test_client_with_retries():
    """Probar creaci√≥n de cliente con reintentos"""
    try:
        print("üîß Importando gradio_client...")
        from gradio_client import Client
        
        print("üîó Probando SouniQ/Modulo1 con reintentos...")
        
        client = None
        max_retries = 3
        
        for attempt in range(max_retries):
            try:
                print(f"üîÑ Intento {attempt + 1}/{max_retries}")
                client = Client("SouniQ/Modulo1")
                print("‚úÖ Cliente conectado exitosamente")
                break
                
            except json.JSONDecodeError as json_err:
                print(f"‚ö†Ô∏è JSONDecodeError en intento {attempt + 1}: {json_err}")
                if attempt < max_retries - 1:
                    wait_time = (attempt + 1) * 5  # 5, 10, 15 segundos
                    print(f"üò¥ Esperando {wait_time} segundos antes del siguiente intento...")
                    time.sleep(wait_time)
                else:
                    print("‚ùå Todos los intentos fallaron con JSONDecodeError")
                    return False
                    
            except Exception as e:
                print(f"‚ùå Error cr√≠tico en intento {attempt + 1}: {e}")
                if attempt < max_retries - 1:
                    print("üîÑ Reintentando con error cr√≠tico...")
                    time.sleep(3)
                else:
                    print(f"‚ùå Error final: {e}")
                    return False
        
        if client is None:
            print("‚ùå No se pudo crear el cliente despu√©s de todos los intentos")
            return False
            
        # Si llegamos aqu√≠, el cliente se cre√≥ exitosamente
        print("üéØ ¬°√âXITO! Cliente creado con enfoque de reintentos")
        
        # Probar que predict est√° disponible
        if hasattr(client, 'predict'):
            print("‚úÖ M√©todo predict() disponible")
            
            # Probar llamada sin argumentos para ver error esperado
            try:
                client.predict()
            except Exception as e:
                print(f"‚ö†Ô∏è Error esperado en predict(): {e}")
                print("   (Esto es normal - necesita argumentos)")
                
        return True
        
    except Exception as e:
        print(f"‚ùå Error general: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_client_with_retries()
    if success:
        print("\nüéâ CONCLUSI√ìN: El enfoque de reintentos funciona!")
        print("üöÄ Ahora se puede probar en la web de producci√≥n")
    else:
        print("\n‚ùå CONCLUSI√ìN: Persisten problemas con las APIs")
        print("üîß Se necesita investigaci√≥n adicional")
